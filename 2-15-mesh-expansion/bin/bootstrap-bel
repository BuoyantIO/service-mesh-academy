#!/usr/bin/env sh

# SPDX-FileCopyrightText: 2024 Buoyant Inc.
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2024 Buoyant Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
#       http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -eu

echo '==========================================='
echo '= WARNING WARNING WARNING WARNING WARNING ='
echo '=                                         ='
echo '=      NOT PRODUCTION-READY SOFTWARE      ='
echo '=                                         ='
echo '= This is only suitable for demonstration ='
echo '= purposes. DO NOT run this in prod!!!!!! ='
echo '=                                         ='
echo '= WARNING WARNING WARNING WARNING WARNING ='
echo '==========================================='
echo
echo 'SMA demo-bel-external-base %%VERSION%% / proxy %%PROXY_VERSION%%'

rpm -ivh /opt/linkerd/linkerd-proxy-harness.rpm --nodeps

# We require WORKLOAD_NAME and WORKLOAD_NAMESPACE to be set, always.
# If NODE_IP and at least one of POD_CIDR and SVC_CIDR are set, we'll
# also set up IP routing for the workload to talk to the control plane.

if [ -z "$WORKLOAD_NAME" ]; then
  echo "WORKLOAD_NAME must be set" >&2
  exit 1
fi

if [ -z "$WORKLOAD_NAMESPACE" ]; then
  echo "WORKLOAD_NAMESPACE must be set" >&2
  exit 1
fi

# We also need to have a mounted /opt/spire/certs with ca.crt and ca.key in it.
if [ ! -f /opt/spire/certs/ca.crt ]; then
  echo "/opt/spire/certs/ca.crt is missing" >&2
  exit 1
fi

if [ ! -f /opt/spire/certs/ca.key ]; then
  echo "/opt/spire/certs/ca.key is missing" >&2
  exit 1
fi

export SPIFFE_ID="spiffe://root.linkerd.cluster.local/$WORKLOAD_NAME"

# Start SPIRE running. This is synchronous: it waits till we're ready to go.
/opt/spire/bin/bootstrap-spire

# Manage IP routing...

set +u

if [ -n "$NODE_IP" ]; then
    if [ -n "$POD_CIDR" ]; then
        echo "Routing $POD_CIDR via $NODE_IP"
        ip route add $POD_CIDR via $NODE_IP
    fi
    if [ -n "$SVC_CIDR" ]; then
        echo "Routing $SVC_CIDR via $NODE_IP"
        ip route add $SVC_CIDR via $NODE_IP
    fi
fi

set -u

# ...get the harness configured...
harnessctl set-config \
           --workload-group-name=$WORKLOAD_NAME \
           --workload-group-namespace=$WORKLOAD_NAMESPACE \
           --control-plane-address=linkerd-autoregistration.linkerd.svc.cluster.local.:8081 \
           --control-plane-identity=linkerd-autoregistration.linkerd.serviceaccount.identity.linkerd.cluster.local

# ...and start it running.
echo "==== starting proxyharness"
systemctl start linkerd-proxy-harness

# Once that's done, start the workload!
echo "==== starting workload"
/workload/start
