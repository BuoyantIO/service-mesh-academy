## Note that all of these resources are in the cert-manager namespace.
##
## First, we create a ClusterIssuer that will be used to sign the trust
## anchor certificate. (We've been talking about "signing" certificates,
## but cert-manager calls that "issuing". They mean the same thing here.)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: linkerd-self-signed-issuer
  namespace: cert-manager
spec:
  # This ClusterIssuer uses a self-signed certificate.
  selfSigned: {}
---
## Next, we use a Certificate resource to tell cert-manager how to create
## the Linkerd trust anchor certificate. NOTE: this certificate is still
## in the cert-manager namespace! That's because we really, really don't
## want its private key visible anywhere else in the cluster.
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: linkerd-trust-anchor
  namespace: cert-manager
spec:
  # Set the common name of the subject.
  commonName: root.linkerd.cluster.local
  # This is itself a CA certificate.
  isCA: true
  # It must be issued (signed) by the ClusterIssuer above.
  issuerRef:
    name: linkerd-self-signed-issuer
    kind: ClusterIssuer
    # group: cert-manager.io
  # It uses a 256-bit ECDSA private key...
  privateKey:
    algorithm: ECDSA
  # ...which will be stored in this Secret.
  secretName: linkerd-identity-trust-roots
  # Note that we didn't say anything about duration or renewal times.
  # That means that this certificate will use the defaults: it will expire
  # in 90 days, and should be renewed by the 30-day mark (and cert-manager
  # will handle that for us).
---
## Finally, create another ClusterIssuer that will use the Certificate
## above to sign Linkerd issuer certificates.
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: linkerd-trust-anchor
  namespace: cert-manager
spec:
  ca:
    secretName: linkerd-identity-trust-roots
